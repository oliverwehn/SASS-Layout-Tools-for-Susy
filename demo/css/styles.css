@charset "UTF-8";
/**
 * Map of predefined constants
 */
/** 
 * Layouts map
 */
/**
 * Set up layout-relevant globals
 */
/**
 * Sets a value in an existing map.
 * @param {Map}     $map   Map the value will be set in.
 * @param {String}  $key   Key the value will be set for.
 * @param {Misc}    $value Value to be set.
 */
/**
 * Merges to SASS maps recursively
 * @param  {Map}  $map1 Map to be merged into.
 * @param  {Map}  $map2 Map to be merged into $map1.
 * @return {Map}        Merged map.
 */
/**
 * Implodes a list separating list items by $separator.
 * @param  {List}    $list                  Sass list of misc items.
 * @param  {String}  $separator: ''         Separator string.
 * @param  {Boolean} $recursive: false      Optionally implode items of type list.
 * @return {String}                         Imploded list as string.
 */
.page__section:after {
  content: "";
  display: table;
  clear: both; }

/**
 * Defines a new constant.
 * Based on code by Hugo Giraudel, http://www.sitepoint.com/dealing-constants-sass/
 * @param  {String} $name  Name of new constant.
 * @param  {Misc}   $value Value of constant
 */
/**
 * Retrieves value of a constant.
 * Based on code by Hugo Giraudel, http://www.sitepoint.com/dealing-constants-sass/
 * @param  {String} $name Name of constant.
 * @return {Misc}         Value of constant.
 */
/**
 * Calculates a relative em value from $px relatively to $px-context.
 * @param  {px value} $px         Value.
 * @param  {px value} $px-context Context.
 * @return {em value}             Relative em value.
 */
/**
 * Calculates the percentage value of $px relatively to $px-context.
 * @param  {px value} $px          Part.
 * @param  {px value} $px-context  Context.
 * @return {% value}               Percentage value.
 */
/**
 * Returns rem value for $px relative to constan root font size.
 * @param  {px value}  $px Absolute pixel value.
 * @return {rem value}     Rem value relative to root font size.
 */
/**
 * Converts all px values in $list to em values based on $context.
 * @param  {List} $list   List of values.
 * @return {List}         List of modified values.
 */
/**
 * Sets one or multiple tone values for a color palette.
 * @param {String}              $palette        Name of color palette.
 * @param {String|Map}          $tone           Name of tone or–if no $value is given–map of tone-value pairs.
 * @param {Color value|Boolean} $value: false   Color value to be set for $tone.
 */
/**
 * Sets one or multiple tone values for a color palette.
 * @param {String}              $palette        Name of color palette.
 * @param {String|Map}          $tone           Name of tone or–if no $value is given–map of tone-value pairs.
 * @param {Color value|Boolean} $value: false   Color value to be set for $tone.
 */
/**
 * Returns a color value for a $tone from a defined $palette.
 * @param  {String} $palette         Name of palette.
 * @param  {String} $tone:   'base'  Name of tone, default to `base`.
 * @return {Misc}                    Color value.
 */
/**
 * Sets a base value and creates new absolute typographic context based on rem values.
 * @param  {px value}           $font-size                     Font size value.
 * @param  {px value|Boolean}   $line-height: 1.25*$font-size  Line height value, defaults to 1.25 times font size value-
 * @param  {Booelan}            $set-styles:  true             Pass false to just switch type context without settings styles.
 */
/**
 * Changes the local type context without touching type base.
 * @param  {px value}         $font-size                     Font size value.
 * @param  {px value|Boolean} $line-height: 1.25*$font-size  Line height value, defaults to 1.25 times font size value.
 * @param  {Boolean}          $set-styles:  true             Pass false to just switch type context without setting styles.
 */
/**
 * Sets up layouts from map, initiates default layout, sets globals.
 * @param  {Map}    $layouts Map of layout definitions
 */
/**
 * Implements settings for layout defined by $layout-key locally for @content. Wraps @content in a media query if `breakpoint` settings are present in layout definition.
 * @param  {String} $layout-key: default       Layout key of layout which’s settings to be used as context for @content. Can contain modifiers like `up` or `down` to only use min- or max-values of breakpoints.
 */
/**
 * Builds layout map by extending the layout defined in $this-layout accordingly to inheritence defined through `extends` setting or a particular layout defined through $with-layout parameter.
 * @param  {String} $this-layout                      Key of the layout to be extended.
 * @param  {String|Boolean} $with-layout:   false     Optional layout key to be extended with $this-layout
 * @return {Map|Boolean}                              Returns map of extended layout or false, if a layout couldn’t be correctly retrieved from $LAYOUTS.
 */
/**
 * Extends layout with map $extension.
 * @param  {Map}    $extension              Map with additional layout settings.
 * @param  {String} $layout-key: 'default'  Key of layout to be retrieved and returned after extension.
 * @return {Map}                            Returns extended layout map for $layout-key.
 */
/**
 * Extends layout with map $extension.
 * @param  {Map}    $extension              Map with additional layout settings.
 * @param  {String} $layout-key: 'default'  Key of layout to be retrieved and returned after extension.
 */
/**
 * Retrieves a particular value from a group or a complete group or whole config from current or specified layout
 * @param  {String|Boolean} $group:     false         Group of settings to be retrieved. Set to `false` for all groups of a layout.
 * @param  {String|Boolean} $key:       false         Specifies particular setting to be retrieved. Set to `false` for all settings of a group.
 * @param  {String|Boolean} $of-layout: false         Defines layout settings will be retrieved from. Set to `false` to retrieve from current layout.
 * @return {CSS value|Map|Boolean}                    Returns a particular setting’s value, a map of settings, a layout map or false if requested resource doesn’t exist.
 */
*, *:before, *:after {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box; }

.page__body {
  width: 80%;
  max-width: 45.71429em;
  margin: 0 auto;
  background-color: #888888; }
  @media all and (min-width: 50.0625em) {
    .page__body {
      max-width: 66.66667em; } }

.spanner {
  background-color: #bbbbbb;
  border-top: 2px solid #444444;
  padding: 0.71429em; }
  .spanner--main {
    width: 100%;
    float: left;
    margin-left: 0;
    margin-right: 0;
    margin-bottom: 0.71429em; }
    .spanner--main .spanner__counter::before {
      content: 'all'; }
  .spanner--right {
    width: 100%;
    float: left;
    margin-left: 0;
    margin-right: 0; }
    .spanner--right .spanner__counter::before {
      content: 'all'; }
  @media all and (min-width: 50.0625em) {
    .spanner--main {
      width: 66.10169%;
      float: left;
      margin-right: 1.69492%;
      margin-bottom: 0; }
      .spanner--main .spanner__counter::before {
        content: "8"; }
    .spanner--right {
      width: 32.20339%;
      float: right;
      margin-right: 0; }
      .spanner--right .spanner__counter::before {
        content: "4"; } }

/*# sourceMappingURL=styles.css.map */
